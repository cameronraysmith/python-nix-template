if has nix; then
  watch_file \
    nix/modules/*.nix \
    pyproject.toml \
    uv.lock
  if ! use flake .#default --impure --accept-flake-config --print-build-logs
  then
      echo "nix flake could not be built; update flake.nix and run direnv allow/reload" >&2
  fi
  
  
  printf "\nrun \`nix flake update --impure && nix flake check --impure\` to update the flake lockfile.\n"
  printf "use \`direnv revoke\` to unload the dev environment or \`direnv allow\` to reload it.\n"
else
  # The equivalent nix shell application set-git-env is now run automatically
  # via shellHook and the variables are already exported to the environment.
  # Fallback to the local script if Nix isn't available or disable if it's not
  # executable.
  if [ -f ./scripts/set-git-env.sh ]; then
    if [ -x ./scripts/set-git-env.sh ]; then
      ./scripts/set-git-env.sh
    else
      echo "Warning: scripts/set-git-env.sh exists but is not executable. Run 'chmod +x ./scripts/set-git-env.sh' to make it executable."
    fi
  else
    echo "Warning: scripts/set-git-env.sh not found and Nix not available"
  fi
  
  printf "\nNix is not installed or not available in your PATH. You can either:\n"
  printf "1. Run \`make bootstrap\` from the Makefile to set up nix\n"
  printf "2. Visit https://nix.dev to find instructions on installing nix\n\n"
fi

if [ -f .env ]; then
  dotenv
else
  printf "You can create a .env file to add environment variables\n\n"
fi

printf "\n$GIT_REPO_NAME $GIT_REF $GIT_SHA_SHORT $GIT_SHA\n\n"
